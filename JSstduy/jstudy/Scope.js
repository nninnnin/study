//자바스크립트는 함수에 대한 유효범위만을 제공한다.
//많은 언어들이 블록(대체로 {})에 대한 유효범위를 제공하는 것과 다른 점이다.
//아래 예제의 결과는 coding everybody 이다.

for(i=0;i<1;i++){
    var name='coding everybody'
}

console.log(name);

//자바에서 위의 코드는 허락되지 않는다. name은 지역변수로 for문 안에서 선언되었는데 이를 for문 밖에서 호출하고 있기 때문이다.

//하지만 자바스크립트에서 var로 선언된 변수의 scope는 {} 단위로 block되는 것이 아니라, 함수단위로! 끊어진다.

//따라서 위의 name은 암데서나 접근가능하다. 전역 scope라고 볼 수 있겠다.(맞지?)


// "정적 유효범위"
//  자바스크립트는 "함수가 선언된 시점에서" 유효범위(scope)를 갖는다. 
//이러한 유효범위의 방식을 정적 유효범위(static scoping), 혹은 렉시컬(lexical scoping)이라고 한다.

var i = 5;

function a(){
    var i = 10;
    b();
}

function b(){
    console.log(i);//이 i는 누구인가?
}

a();

//함수 b가 호출된 시점의 i의 값 10이 아닌, 함수 b가 '선언된 시점'의 i인 '5'가 출력된다!

//1. 호이스팅으로 var i, a(), b() 선언 및 스코프 결정
// 특히 b의 스코프는, 선언 될 당시에 전역스코프임을 알 수 있다.
// 따라서 얘는 전역에 접근한다.
//2. a()가 호출되며 a 컨텍스트 열림
//3. 호이스팅으로 지역변수 i선언, 이후 i에 10 할당, b호출
//4. b컨텍스트 열리고 console.log(i); 가 실행된다
//5. 이 i는 무엇인가?
// 말하자면 b가 호출되기 이전, 전역에서 호이스팅되었으며 전역으로 스코프가 결정 되어있다.
// 그러므로 b가 호출된 시점에서의 i=10이 아닌, b가 선언된 시점에서 i=5를 출력하게 된다는 말이다.

//그러니까 다시 말하자면, b한테는, 그가 선언될 당시, 즉 이름을 불려 그가 의미를 갖고 어떤 존재가 될 당시에 i가 바로 b에게 진짜 i가 되는 것이다. 그니까 함수로 선언 될 때 어떤 한 스크린샷을 찍어두고, 호출 될 당시에는 그 스크린샷에서 정보를 찾아서 갖다주는거라고 이해하면 좋을 것 같다.